{"/home/travis/build/npmtest/node-npmtest-gzippo/test.js":"/* istanbul instrument in package npmtest_gzippo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gzippo/lib.npmtest_gzippo.js":"/* istanbul instrument in package npmtest_gzippo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gzippo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gzippo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gzippo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gzippo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gzippo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gzippo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gzippo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gzippo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gzippo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gzippo.__dirname + '/lib.npmtest_gzippo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/index.js":"exports.staticGzip = require('./lib/staticGzip.js');\nexports.compress = require('./lib/compress.js');\nexports.Store = require('./lib/store.js');","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/staticGzip.js":"/*!\n * Tom Gallacher\n *\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\n// Commented out as I think that connect is avalible from within express...\n// try {\n    // var staticMiddleware = require('connect').static;\n\n// } catch (e) {\n//  staticMiddleware = require('express').static;\n// }\n\nvar fs = require('fs'),\n    parse = require('url').parse,\n    path = require('path'),\n    zlib = require('zlib'),\n    MemoryStore = require('./memory'),\n    StoreStream = require('./storeStream'),\n    FileAsset = require('./fileAsset'),\n    send = require('send'),\n    mime = send.mime\n    ;\n\n/**\n * Strip `Content-*` headers from `res`.\n *\n * @param {ServerResponse} res\n * @api public\n */\n\nvar removeContentHeaders = function(res){\n    Object.keys(res._headers).forEach(function(field){\n        if (0 === field.indexOf('content')) {\n            res.removeHeader(field);\n        }\n    });\n};\n\n/**\n * Supported content-encoding methods.\n */\n\nvar methods = {\n    gzip: zlib.createGzip,\n    deflate: zlib.createDeflate\n};\n\n/**\n * Default filter function.\n */\n\nexports.filter = function(req, res){\n  var type = res.getHeader('Content-Type') || '';\n  return type.match(/json|text|javascript/);\n};\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @api private\n */\n\nvar parseUrl = function(req){\n  var parsed = req._parsedUrl;\n  if (parsed && parsed.href == req.url) {\n    return parsed;\n  } else {\n    return req._parsedUrl = parse(req.url);\n  }\n};\n\n/**\n * By default gzip's static's that match the given regular expression /text|javascript|json/\n * and then serves them with Connects static provider, denoted by the given `dirPath`.\n *\n * Options:\n *\n *  -   `maxAge` how long gzippo should cache gziped assets, defaulting to 1 day\n *  -   `clientMaxAge`  client cache-control max-age directive, defaulting to 0; 604800000 is one week.\n *  -   `contentTypeMatch` - A regular expression tested against the Content-Type header to determine whether the response\n *      should be gzipped or not. The default value is `/text|javascript|json/`.\n *  -   `prefix` - A url prefix. If you want all your static content in a root path such as /resource/. Any url paths not matching will be ignored\n *\n * Examples:\n *\n *     connect.createServer(\n *       connect.staticGzip(__dirname + '/public/');\n *     );\n *\n *     connect.createServer(\n *       connect.staticGzip(__dirname + '/public/', {maxAge: 86400000});\n *     );\n *\n * @param {String} path\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function staticGzip(dirPath, options){\n    options = options || {};\n\n    var maxAge = options.maxAge || 86400000,\n        contentTypeMatch = options.contentTypeMatch || /text|javascript|json/,\n        clientMaxAge = options.clientMaxAge || 604800000,\n        prefix = options.prefix || '',\n        names = Object.keys(methods),\n        compressionOptions = options.compression || {},\n        store = options.store || new MemoryStore();\n\n    if (!dirPath) throw new Error('You need to provide the directory to your static content.');\n    if (!contentTypeMatch.test) throw new Error('contentTypeMatch: must be a regular expression.');\n\n    dirPath = path.normalize(dirPath);\n\n    return function(req, res, next) {\n        var acceptEncoding = req.headers['accept-encoding'] || '',\n            url,\n            filename,\n            contentType,\n            charset,\n            method;\n\n        function pass(name) {\n            send(req, url.substring(prefix.length))\n                .maxage(clientMaxAge || 0)\n                .root(dirPath)\n                .pipe(res)\n                ;\n        }\n\n        function setHeaders(stat, asset) {\n            res.setHeader('Content-Type', contentType);\n            res.setHeader('Content-Encoding', method);\n            res.setHeader('Vary', 'Accept-Encoding');\n            // if cache version is avalible then add this.\n            if (asset) {\n                // res.setHeader('Content-Length', asset.length);\n                res.setHeader('ETag', '\"' + asset.length + '-' + Number(asset.mtime) + '\"');\n                res.setHeader('Last-Modified', asset.mtime.toUTCString());\n            }\n            res.setHeader('Date', new Date().toUTCString());\n            res.setHeader('Expires', new Date(Date.now() + clientMaxAge).toUTCString());\n            res.setHeader('Cache-Control', 'public, max-age=' + (clientMaxAge / 1000));\n        }\n\n        // function gzipAndSend(filename, gzipName, mtime) {\n        //     gzippo(filename, charset, function(gzippedData) {\n        //         gzippoCache[gzipName] = {\n        //             'ctime': Date.now(),\n        //             'mtime': mtime,\n        //             'content': gzippedData\n        //         };\n        //         sendGzipped(gzippoCache[gzipName]);\n        //     });\n        // }\n\n        function forbidden(res) {\n          var body = 'Forbidden';\n          res.setHeader('Content-Type', 'text/plain');\n          res.setHeader('Content-Length', body.length);\n          res.statusCode = 403;\n          res.end(body);\n        }\n\n        if (req.method !== 'GET' && req.method !== 'HEAD') {\n            return next();\n        }\n\n        url = decodeURI(parseUrl(req).pathname);\n\n        // Allow a url path prefix\n        if (url.substring(0, prefix.length) !== prefix) {\n            return next();\n        }\n\n        filename = path.normalize(path.join(dirPath, url.substring(prefix.length)));\n        // malicious path\n        if (0 != filename.indexOf(dirPath)){\n          return forbidden(res);\n        }\n\n        // directory index file support\n        if (filename.substr(-1) === '/') filename += 'index.html';\n\n\n        contentType = mime.lookup(filename);\n        charset = mime.charsets.lookup(contentType, 'UTF-8');\n        contentType = contentType + (charset ? '; charset=' + charset : '');\n\n        // default to gzip\n        if ('*' == acceptEncoding.trim()) method = 'gzip';\n\n        // compression method\n        if (!method) {\n            for (var i = 0, len = names.length; i < len; ++i) {\n              if (~acceptEncoding.indexOf(names[i])) {\n                method = names[i];\n                break;\n              }\n            }\n        }\n\n        if (!method) return pass(filename);\n\n        fs.stat(filename, function(err, stat) {\n\n            if (err) {\n                return next();\n            }\n\n            if (stat.isDirectory()) {\n                return next();\n            }\n\n            if (!contentTypeMatch.test(contentType)) {\n                return pass(filename);\n            }\n\n            // superceeded by if (!method) return;\n            // if (!~acceptEncoding.indexOf('gzip')) {\n            //     return pass(filename);\n            // }\n\n            var base = path.basename(filename),\n                dir = path.dirname(filename),\n                gzipName = path.join(dir, base + '.gz');\n\n            var sendGzipped = function(filename) {\n                var stream = fs.createReadStream(filename);\n\n                req.on('close', stream.destroy.bind(stream));\n\n                var storeStream = new StoreStream(store, filename, {\n                    mtime: stat.mtime,\n                    maxAge: options.maxAge\n                });\n\n                var compressionStream = methods[method](options.compression);\n\n                stream.pipe(compressionStream).pipe(storeStream).pipe(res);\n\n                stream.on('error', function(err){\n                    if (res.headerSent) {\n                        console.error(err.stack);\n                        req.destroy();\n                    } else {\n                        next(err);\n                    }\n                });\n            };\n\n            store.get(decodeURI(filename), function(err, asset) {\n                setHeaders(stat, asset);\n                if (err) {\n                    // handle error\n\n                } else if (!asset) {\n                    sendGzipped(decodeURI(filename));\n                } else if ((asset.mtime < stat.mtime) || asset.isExpired) {\n                    sendGzipped(decodeURI(filename));\n                }\n                else if (req.headers['if-modified-since'] && asset &&\n                // Optimisation: new Date().getTime is 90% faster that Date.parse()\n                +stat.mtime <= new Date(req.headers['if-modified-since']).getTime()) {\n                    removeContentHeaders(res);\n                    res.statusCode = 304;\n                    return res.end();\n                }\n                else {\n                    // StoreReadStream to pipe to res.\n                    // console.log(\"hit: \" + filename + \"              length: \" + asset.length);\n                    for (var i = 0; i < asset.content.length; i++) {\n                        res.write(asset.content[i], 'binary');\n                    }\n                    res.end();\n                }\n            });\n        });\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/memory.js":"\n/*!\n * gzippo - MemoryStore\n *\n * MIT Licensed\n */\n\nvar Store = require('./store'),\n    util = require('util');\n\n/**\n * new `MemoryStore`.\n *\n * @api public\n */\n\nvar MemoryStore = module.exports = function MemoryStore() {\n  Store.call(this);\n  this.assets = {};\n};\n\nutil.inherits(MemoryStore, Store);\n\n/**\n * Attempt to fetch an asset by its filename - `file`.\n *\n * @param {String} fileName\n * @param {Function} cb\n * @api public\n */\n\nMemoryStore.prototype.get = function(fileName, cb) {\n  var that = this;\n  process.nextTick(function(){\n    var expires,\n        asset = that.assets[fileName];\n    if (asset) {\n      // expires = (typeof asset.expires === 'string') ?\n      //   +Date.parse(asset.expires) :\n      //   asset.expires;\n      // if (!expires || +Date.now() < expires) {\n        cb(null, asset);\n      // } else {\n      //   that.purgeFile(file, cb);\n      // }\n    } else {\n      cb();\n    }\n  });\n};\n\n/**\n *\n * @param {FileAsset} asset\n * @param {Function} cb\n * @api public\n */\n\nMemoryStore.prototype.set = function(asset, cb) {\n  var that = this;\n  process.nextTick(function() {\n    that.assets[asset.name] = asset.data;\n    if(cb instanceof Function) cb();\n  });\n};\n\n/**\n * purge the cache\n *\n * @param {Function} cb\n * @api public\n */\n\nMemoryStore.prototype.purge = function(cb){\n  this.assets = {};\n  if(cb instanceof Function) cb();\n};\n\n/**\n * purge the an item from thecache\n *\n * @param {FileAsset} asset\n * @param {Function} cb\n * @api public\n */\n\nMemoryStore.prototype.purgeFile = function(asset, cb){\n  process.nextTick(function() {\n    delete this.assets[asset.name];\n    if(cb instanceof Function) cb();\n  });\n};\n\n/**\n * Fetch number of cached files.\n *\n * @param {Function} fn\n * @api public\n */\n\nMemoryStore.prototype.length = function(cb){\n  cb(null, Object.keys(this.assets).length);\n};","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/store.js":"var util = require('util');\n\n/*\n * gzippo - store\n * Copyright(c) 2012 Tom Gallacher\n * MIT Licensed\n */\n\nvar Store = module.exports = function Store(options) {\n  if (!(this instanceof Store)) return new Store(options);\n};\n","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/storeStream.js":"var util = require('util'),\n    stream = require('stream'),\n    FileAsset = require('./fileAsset');\n\n/*\n * gzippo - StoreStream\n * Copyright(c) 2012 Tom Gallacher\n * MIT Licensed\n */\n\nvar StoreStream = module.exports = function StoreStream(store, fileName, options) {\n  if (!(this instanceof StoreStream)) return new StoreStream(store, options);\n  options = options || {};\n\n  this._queue = [];\n  this._processing = false;\n  this._ended = false;\n  this.readable = true;\n  this.writable = true;\n\n  this._asset = new FileAsset(fileName, options);\n  this._store = store;\n};\n\nutil.inherits(StoreStream, stream.Stream);\n\nStoreStream.prototype.write = function write(chunk, cb) {\n  if (this._ended) {\n    return this.emit('error', new Error('Cannot write after end'));\n  }\n\n  if (arguments.length === 1 && typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n  }\n\n  if (!chunk) {\n    chunk = null;\n  } else if (typeof chunk === 'string') {\n    chunk = new Buffer(chunk);\n  } else if (!Buffer.isBuffer(chunk)) {\n    return this.emit('error', new Error('Invalid argument'));\n  }\n\n\n  var empty = this._queue.length === 0;\n\n  this._queue.push([chunk, cb]);\n  this._process();\n  if (!empty) {\n    this._needDrain = true;\n  }\n  return empty;\n};\n\nStoreStream.prototype.flush = function flush(cb) {\n  return this.write(cb);\n};\n\nStoreStream.prototype.end = function end(chunk, cb) {\n  var self = this;\n  this._ending = true;\n  var ret = this.write(chunk, function() {\n    self.emit('end');\n    process.nextTick(function() {\n      self._store.set(self._asset);\n    });\n    if (cb) cb();\n  });\n  this._ended = true;\n  return ret;\n};\n\nStoreStream.prototype._process = function() {\n  var self = this;\n  if (this._processing || this._paused) return;\n\n  if (this._queue.length === 0) {\n    if (this._needDrain) {\n      this._needDrain = false;\n      this.emit('drain');\n    }\n    // nothing to do, waiting for more data at this point.\n    return;\n  }\n\n  var req = this._queue.shift();\n  var cb = req.pop();\n  var chunk = req.pop();\n\n  if (this._ending && this._queue.length === 0) {\n    this._flush = true;\n  }\n\n  if (chunk !== null) {\n    self.emit('data', chunk);\n    this._asset.fileContents.push(chunk);\n  }\n\n  // finished with the chunk.\n  self._processing = false;\n  if (cb) cb();\n  self._process();\n};\n\nStoreStream.prototype.destory = function() {\n  this._paused = true;\n  StoreStream.prototype.end.call(this);\n};\n\nStoreStream.prototype.pause = function() {\n  this._paused = true;\n  this.emit('pause');\n};\n\nStoreStream.prototype.resume = function() {\n  this._paused = false;\n  this._process();\n};\n","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/fileAsset.js":"var FileAsset = module.exports = function FileAsset(name, options) {\n  options = options || {};\n  this._maxAge = options.maxAge || 86400000;\n  this._mtime = options.mtime || new Date();\n\n  this._fileName = name;\n  this._ctime = +Date.now();\n  this.fileContents = [];\n  this.fileContentsLength = 0;\n};\n\n/**\n * Prototype.\n */\n\nFileAsset.prototype = {\n  set maxAge(maxAge) {\n    this._maxAge = maxAge;\n  },\n\n  get maxAge() {\n    return this._maxAge;\n  },\n\n  get mtime() {\n    return this._mtime;\n  },\n\n  get isExpired() {\n    return (this._ctime + this._maxAge) < +Date.now();\n  },\n\n  get name() {\n    return this._fileName;\n  },\n\n  get content() {\n    // var file = Buffer(this.fileContentsLength);\n    // var pos = 0;\n    // for (var i = 0; i < this.fileContents.length; i++) {\n    //   // this.fileContents[i] = this.fileContents[i].toString();\n    //   // buffer.copy(file, pos);\n    //   // pos += buffer.length;\n    // }\n\n    return this.fileContents;\n  },\n\n  get length() {\n    return this.fileContentsLength;\n  },\n\n  get data() {\n    return {\n      expires: this._expires,\n      mtime: this._mtime,\n      content: this.content,\n      length: this.fileContentsLength\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gzippo/node_modules/gzippo/lib/compress.js":"\n/*!\n * Connect - compress\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar zlib = require('zlib');\n\n/**\n * Supported content-encoding methods.\n */\n\nexports.methods = {\n    gzip: zlib.createGzip,\n    deflate: zlib.createDeflate\n};\n\n/**\n * Default filter function.\n */\n\nexports.filter = function(req, res){\n  var type = res.getHeader('Content-Type') || '';\n  return type.match(/json|text|javascript/);\n};\n\n/**\n * Compress response data with gzip/deflate.\n *\n * Filter:\n *\n * A `filter` callback function may be passed to\n * replace the default logic of:\n *\n *     exports.filter = function(req, res){\n *       var type = res.getHeader('Content-Type') || '';\n *       return type.match(/json|text|javascript/);\n *     };\n *\n * Options:\n *\n *  All remaining options are passed to the gzip/deflate\n *  creation functions. Consult node's docs for additional details.\n *\n *     - `chunkSize` (default: 16*1024)\n *     - `windowBits`\n *     - `level`: 0-9 where 0 is no compression, and 9 is slow but best compression\n *     - `memLevel`: 1-9 low is slower but uses less memory, high is fast but uses more\n *     - `strategy`: compression strategy\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function compress(options) {\n  var options = options || {}\n    , names = Object.keys(exports.methods)\n    , filter = options.filter || exports.filter;\n\n  return function(req, res, next){\n    var accept = req.headers['accept-encoding']\n      , write = res.write\n      , end = res.end\n      , stream\n      , method;\n\n    // vary\n    res.setHeader('Vary', 'Accept-Encoding');\n\n    // proxy\n\n    res.write = function(chunk, encoding){\n      if (!this.headerSent) this._implicitHeader();\n      return stream\n        ? stream.write(chunk, encoding)\n        : write.call(res, chunk, encoding);\n    };\n\n    res.end = function(chunk, encoding){\n      if (chunk) this.write(chunk, encoding);\n      return stream\n        ? stream.end()\n        : end.call(res);\n    };\n\n    res.on('header', function(){\n      // default request filter\n      if (!filter(req, res)) return;\n\n      // SHOULD use identity\n      if (!accept) return;\n\n      // head\n      if ('HEAD' == req.method) return;\n\n      // default to gzip\n      if ('*' == accept.trim()) method = 'gzip';\n\n      // compression method\n      if (!method) {\n        for (var i = 0, len = names.length; i < len; ++i) {\n          if (~accept.indexOf(names[i])) {\n            method = names[i];\n            break;\n          }\n        }\n      }\n\n      // compression method\n      if (!method) return;\n\n      // compression stream\n      stream = exports.methods[method](options);\n\n      // header fields\n      res.setHeader('Content-Encoding', method);\n      res.removeHeader('Content-Length');\n\n      // compression\n\n      stream.on('data', function(chunk){\n        write.call(res, chunk);\n      });\n\n      stream.on('end', function(){\n        end.call(res);\n      });\n    });\n\n    next();\n  };\n}"}